<?php

declare(strict_types=1);
{{- if .Config.Namespace }}

namespace {{ .Config.Namespace }};
{{- end }}

/**
 * {{ .Info.Title }} API Client
 * 
 * {{ .Info.Description }}
 * Version: {{ .Info.Version }}
 * 
 * Generated by piak from OpenAPI specification
 */
class ApiClient
{
    private string $baseUrl;
    private array $defaultHeaders;

    public function __construct(
        string $baseUrl,
        array $defaultHeaders = []
    ) {
        $this->baseUrl = rtrim($baseUrl, '/');
        $this->defaultHeaders = array_merge([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
        ], $defaultHeaders);
    }

    /**
     * Make a generic HTTP request
     * 
     * @param string $method HTTP method
     * @param string $endpoint API endpoint
     * @param array<string, mixed> $data Request data
     * @param array<string, string> $headers Additional headers
     * @return array<string, mixed>
     * @throws \Exception
     */
    public function request(
        string $method,
        string $endpoint,
        array $data = [],
        array $headers = []
    ): array {
        $url = $this->baseUrl . '/' . ltrim($endpoint, '/');
        $allHeaders = array_merge($this->defaultHeaders, $headers);
        
        $ch = curl_init();
        
        $curlOptions = [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_CUSTOMREQUEST => strtoupper($method),
            CURLOPT_HTTPHEADER => array_map(
                fn($key, $value) => "$key: $value",
                array_keys($allHeaders),
                array_values($allHeaders)
            ),
        ];
        
        if (!empty($data)) {
            if (in_array(strtoupper($method), ['GET', 'DELETE'])) {
                $curlOptions[CURLOPT_URL] .= '?' . http_build_query($data);
            } else {
                $curlOptions[CURLOPT_POSTFIELDS] = json_encode($data);
            }
        }
        
        curl_setopt_array($ch, $curlOptions);
        
        $result = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        curl_close($ch);
        
        if ($result === false) {
            throw new \Exception('cURL error: ' . $error);
        }
        
        if ($httpCode >= 400) {
            throw new \Exception('HTTP error: ' . $httpCode);
        }
        
        $data = json_decode($result, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \Exception('Failed to decode JSON response: ' . json_last_error_msg());
        }
        
        return $data;
    }
} 