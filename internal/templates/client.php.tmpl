<?php
{{- if .Config.PHP.UseStrictTypes }}

declare(strict_types=1);
{{- end }}
{{- if .Config.PHP.Namespace }}

namespace {{ .Config.PHP.Namespace }};
{{- end }}

{{- if eq .Config.HTTPClient "guzzle" }}
use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\RequestOptions;
{{- else if eq .Config.HTTPClient "laravel" }}
use Illuminate\Http\Client\Factory as HttpFactory;
use Illuminate\Http\Client\Response;
{{- end }}
use Psr\Http\Message\ResponseInterface;
{{- if .Config.PHP.GenerateDocblocks }}

/**
 * {{ .Info.Title }} API Client
 * 
 * {{ .Info.Description }}
 * Version: {{ .Info.Version }}
 * 
 * Generated by piak from OpenAPI specification
 */
{{- end }}
class ApiClient
{
{{- if eq .Config.HTTPClient "guzzle" }}
    private Client $client;
{{- else if eq .Config.HTTPClient "laravel" }}
    private HttpFactory $http;
{{- end }}
    private string $baseUrl;
    private array $defaultHeaders;

    public function __construct(
        string $baseUrl,
        array $defaultHeaders = []
{{- if eq .Config.HTTPClient "guzzle" }}
        ,?Client $client = null
{{- else if eq .Config.HTTPClient "laravel" }}
        ,?HttpFactory $http = null
{{- end }}
    ) {
        $this->baseUrl = rtrim($baseUrl, '/');
        $this->defaultHeaders = $defaultHeaders;
{{- if eq .Config.HTTPClient "guzzle" }}
        $this->client = $client ?? new Client();
{{- else if eq .Config.HTTPClient "laravel" }}
        $this->http = $http ?? app(HttpFactory::class);
{{- end }}
    }
{{- range .Endpoints }}

{{- if $.Config.PHP.GenerateDocblocks }}
    /**
{{- if .Description }}
     * {{ .Description }}
{{- else if .Summary }}
     * {{ .Summary }}
{{- end }}
     *
{{- range .Parameters }}
     * @param {{ .Schema.PHPType }} ${{ .Name | toSnake }}{{ if .Description }} {{ .Description }}{{ end }}
{{- end }}
{{- if .RequestBody }}
     * @param {{ .RequestBody.Schema.Name }} $requestBody{{ if .RequestBody.Description }} {{ .RequestBody.Description }}{{ end }}
{{- end }}
     * @return {{ if .Responses }}{{ (index .Responses 0).Schema.Name }}{{ else }}array{{ end }}
{{- if eq $.Config.HTTPClient "guzzle" }}
     * @throws GuzzleException
{{- end }}
     */
{{- end }}
    public function {{ .OperationID | toLower }}(
{{- $params := .Parameters }}
{{- if .RequestBody }}{{ $params = append $params .RequestBody }}{{ end }}
{{- $lastIndex := sub (len $params) 1 }}
{{- range $index, $param := $params }}
        {{ if not $param.Required }}?{{ end }}{{ if $param.Schema }}{{ $param.Schema.PHPType }}{{ else }}{{ $param.RequestBody.Schema.Name }}{{ end }} ${{ if $param.Name }}{{ $param.Name | toSnake }}{{ else }}requestBody{{ end }}{{ if not $param.Required }} = null{{ end }}{{ if ne $index $lastIndex }},{{ end }}
{{- end }}
    ): {{ if .Responses }}{{ (index .Responses 0).Schema.Name }}{{ else }}array{{ end }} {
        $url = $this->baseUrl . '{{ .Path }}';
        
{{- range .Parameters }}
{{- if eq .In "path" }}
        $url = str_replace('{{{ .Name }}}', (string) ${{ .Name | toSnake }}, $url);
{{- end }}
{{- end }}

{{- $queryParams := slice .Parameters }}
{{- range .Parameters }}
{{- if eq .In "query" }}
        $queryParams = [];
{{- break }}
{{- end }}
{{- end }}
{{- range .Parameters }}
{{- if eq .In "query" }}
        if (${{ .Name | toSnake }} !== null) {
            $queryParams['{{ .Name }}'] = ${{ .Name | toSnake }};
        }
{{- end }}
{{- end }}

{{- if eq $.Config.HTTPClient "guzzle" }}
        $options = [
            RequestOptions::HEADERS => $this->defaultHeaders,
{{- if .RequestBody }}
            RequestOptions::JSON => $requestBody,
{{- end }}
{{- range .Parameters }}
{{- if eq .In "query" }}
            RequestOptions::QUERY => $queryParams,
{{- break }}
{{- end }}
{{- end }}
        ];

        $response = $this->client->request('{{ .Method | toUpper }}', $url, $options);
        $data = json_decode($response->getBody()->getContents(), true);
{{- else if eq $.Config.HTTPClient "laravel" }}
        $request = $this->http->withHeaders($this->defaultHeaders);
        
{{- if .RequestBody }}
        $response = $request->{{ .Method | toLower }}($url, $requestBody);
{{- else }}
        $response = $request->{{ .Method | toLower }}($url);
{{- end }}
        
        $data = $response->json();
{{- end }}

        // TODO: Map response data to {{ if .Responses }}{{ (index .Responses 0).Schema.Name }}{{ else }}array{{ end }}
        return $data;
    }
{{- end }}
} 