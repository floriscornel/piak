<?php
{{- if .Config.PHP.UseStrictTypes }}

declare(strict_types=1);
{{- end }}
{{- if .Config.PHP.Namespace }}

namespace {{ .Config.PHP.Namespace }};
{{- end }}

{{- /* Import statements will be generated automatically when needed */ -}}

{{- if .Config.PHP.GenerateDocblocks }}

/**
 * {{ .Name }} union type wrapper
 * 
{{- if .IsOneOf }}
 * Represents a oneOf union - exactly one type must match
{{- else }}
 * Represents an anyOf union - one or more types can match
{{- end }}
 *
{{- range .UnionMembers }}
 * - {{ .Name }}
{{- end }}
 * 
 * Generated by piak from OpenAPI specification
 */
{{- end }}
{{- if .Config.PHP.UseReadonlyProps }}readonly {{ end }}class {{ .Name }}
{
{{- if .IsOneOf }}
    /**
     * The resolved union type instance
     */
    public readonly {{ range $index, $member := .UnionMembers }}{{ if gt $index 0 }}|{{ end }}{{ $member.Name }}{{ end }} $value;

    private function __construct({{ range $index, $member := .UnionMembers }}{{ if gt $index 0 }}|{{ end }}{{ $member.Name }}{{ end }} $value)
    {
        $this->value = $value;
    }
{{- else }}
    {{- /* For anyOf - store all matching types */ -}}
{{- range .UnionMembers }}
    /**
     * {{ .Name }} instance (null if not matched)
     */
    public readonly ?{{ .Name }} ${{ .Name | toLower }};
{{- end }}

    private function __construct(
{{- range $index, $member := .UnionMembers }}
        ?{{ $member.Name }} ${{ $member.Name | toLower }} = null{{ if ne $index (sub (len $.UnionMembers) 1) }},{{ end }}
{{- end }}
    ) {
{{- range .UnionMembers }}
        $this->{{ .Name | toLower }} = ${{ .Name | toLower }};
{{- end }}
    }
{{- end }}

    /**
     * Create union type instance from array data
     * @param array<string, mixed> $data
     * @return self
     * @throws \InvalidArgumentException
     */
    public static function fromArray(array $data): self
    {
{{- if .Discriminator }}
        // Discriminator-based resolution
{{ renderDiscriminatorDetection .Discriminator | indent 8 }}
{{- else }}
        // Heuristic-based resolution
{{ renderHeuristicDetection . | indent 8 }}
{{- end }}
    }

{{- if .IsOneOf }}
    /**
     * Get the resolved type value
     */
    public function getValue(): {{ range $index, $member := .UnionMembers }}{{ if gt $index 0 }}|{{ end }}{{ $member.Name }}{{ end }}
    {
        return $this->value;
    }

{{- range .UnionMembers }}
    /**
     * Check if value is {{ .Name }}
     */
    public function is{{ .Name }}(): bool
    {
        return $this->value instanceof {{ .Name }};
    }

    /**
     * Get value as {{ .Name }} (throws if not correct type)
     * @throws \InvalidArgumentException
     */
    public function as{{ .Name }}(): {{ .Name }}
    {
        if (!$this->is{{ .Name }}()) {
            throw new \InvalidArgumentException('Value is not a {{ .Name }}');
        }
        return $this->value;
    }
{{- end }}
{{- else }}
    {{- /* anyOf helper methods */ -}}
    /**
     * Get all matched types
     * @return array<object>
     */
    public function getMatchedTypes(): array
    {
        $matched = [];
{{- range .UnionMembers }}
        if ($this->{{ .Name | toLower }} !== null) {
            $matched[] = $this->{{ .Name | toLower }};
        }
{{- end }}
        return $matched;
    }

    /**
     * Check if any types matched
     */
    public function hasMatches(): bool
    {
        return count($this->getMatchedTypes()) > 0;
    }

{{- range .UnionMembers }}
    /**
     * Check if {{ .Name }} matched
     */
    public function has{{ .Name }}(): bool
    {
        return $this->{{ .Name | toLower }} !== null;
    }

    /**
     * Get {{ .Name }} instance if matched
     */
    public function get{{ .Name }}(): ?{{ .Name }}
    {
        return $this->{{ .Name | toLower }};
    }
{{- end }}
{{- end }}
} 