<?php
{{- if .Config.PHP.UseStrictTypes }}

declare(strict_types=1);
{{- end }}
{{- if .Config.PHP.Namespace }}

namespace {{ .Config.PHP.Namespace }};
{{- end }}

{{- if .Config.PHP.GenerateDocblocks }}

/**
 * {{ .Name }} enum
 * 
{{- if .Description }}
 * {{ .Description }}
{{- end }}
 * 
 * Allowed values:
{{- range .EnumValues }}
 * - {{ . }}
{{- end }}
 * 
 * Generated by piak from OpenAPI specification
 */
{{- end }}
{{- if .Config.PHP.UseEnumClasses }}
enum {{ .Name }}: {{ if .PHPType.Name }}{{ .PHPType.Name }}{{ else }}string{{ end }}
{
{{- range .EnumValues }}
    case {{ . | toScreamingSnake }} = {{ formatDefaultValue . }};
{{- end }}

    /**
     * Get all enum values
     * @return array<self>
     */
    public static function cases(): array
    {
        return [
{{- range .EnumValues }}
            self::{{ . | toScreamingSnake }},
{{- end }}
        ];
    }

    /**
     * Get enum value from string
     * @throws \ValueError
     */
    public static function from(string|int $value): self
    {
        return match ($value) {
{{- range .EnumValues }}
            {{ formatDefaultValue . }} => self::{{ . | toScreamingSnake }},
{{- end }}
            default => throw new \ValueError("Invalid enum value: $value"),
        };
    }

    /**
     * Try to get enum value from string (returns null if invalid)
     */
    public static function tryFrom(string|int $value): ?self
    {
        try {
            return self::from($value);
        } catch (\ValueError) {
            return null;
        }
    }

    /**
     * Check if value is valid enum value
     */
    public static function isValid(string|int $value): bool
    {
        return self::tryFrom($value) !== null;
    }

    /**
     * Get the string representation
     */
    public function toString(): string
    {
        return (string) $this->value;
    }
}
{{- else }}
{{- /* Fall back to constants for older PHP versions */ -}}
{{- if .Config.PHP.UseReadonlyProps }}readonly {{ end }}class {{ .Name }}
{
{{- range .EnumValues }}
    public const {{ . | toScreamingSnake }} = {{ formatDefaultValue . }};
{{- end }}

    /**
     * All valid enum values
     */
    public const ALL_VALUES = [
{{- range .EnumValues }}
        self::{{ . | toScreamingSnake }},
{{- end }}
    ];

    private {{ .PHPType.Name }} $value;

    public function __construct({{ .PHPType.Name }} $value)
    {
        if (!self::isValid($value)) {
            throw new \InvalidArgumentException("Invalid enum value: $value");
        }
        $this->value = $value;
    }

    /**
     * Get the enum value
     */
    public function getValue(): {{ .PHPType.Name }}
    {
        return $this->value;
    }

    /**
     * Get string representation
     */
    public function toString(): string
    {
        return (string) $this->value;
    }

    /**
     * Check if value is valid enum value
     */
    public static function isValid({{ .PHPType.Name }} $value): bool
    {
        return in_array($value, self::ALL_VALUES, true);
    }

    /**
     * Get all valid enum values
     * @return array<{{ .PHPType.Name }}>
     */
    public static function getAllValues(): array
    {
        return self::ALL_VALUES;
    }

    /**
     * Create from string with validation
     * @throws \InvalidArgumentException
     */
    public static function from({{ .PHPType.Name }} $value): self
    {
        return new self($value);
    }

    /**
     * Try to create from string (returns null if invalid)
     */
    public static function tryFrom({{ .PHPType.Name }} $value): ?self
    {
        try {
            return new self($value);
        } catch (\InvalidArgumentException) {
            return null;
        }
    }

{{- range .EnumValues }}
    /**
     * Create {{ . | toScreamingSnake }} instance
     */
    public static function {{ . | toCamel }}(): self
    {
        return new self(self::{{ . | toScreamingSnake }});
    }

    /**
     * Check if current value is {{ . | toScreamingSnake }}
     */
    public function is{{ . | toCamel }}(): bool
    {
        return $this->value === self::{{ . | toScreamingSnake }};
    }
{{- end }}

    /**
     * Compare with another enum instance
     */
    public function equals(self $other): bool
    {
        return $this->value === $other->value;
    }

    /**
     * JSON serialization
     */
    public function jsonSerialize(): {{ .PHPType.Name }}
    {
        return $this->value;
    }

    /**
     * String representation
     */
    public function __toString(): string
    {
        return $this->toString();
    }
}
{{- end }} 