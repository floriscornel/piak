import { expect, test } from "vitest";

import { readFile } from "node:fs/promises";

import type { Output as FlattenOutput } from "@/converter/flattenProperties";
import { generatePhp } from "./generator";

test("generate php", async () => {
	const objectInput: FlattenOutput = {
		GetTagList: {
			type: "object",
			propertyID: 1,
			properties: {
				posts: {
					type: "array",
					items: {
						type: "reference", // The nested object is replaced with a reference
						refID: 2,
					},
				},
			},
		},
		// The nested object is added to the top level
		// The name of the object is generated by the converter
		PostsItem: {
			propertyID: 2,
			type: "object",
			properties: {
				id: { type: "string", format: "uuid" },
				title: { type: "string" },
				content: { type: "string" },
			},
		},
	};

	const templateInput = await readFile(
		"src/generators/php/templates/index.hbs",
		"utf-8",
	);

	const expectedOutput = {
		"GetTagList.php": `<?php

use App\\Api\\V1\\PostsItem;

namespace App\\Api\\V1;

readonly class GetTagList {
    /**
     * @var PostsItem[]
     */
    public array $posts;

    public function __construct(
        public array $posts
    ) {}
}`,
		"PostsItem.php": `<?php

namespace App\\Api\\V1;

readonly class PostsItem {
    public string $id;
    public string $title;
    public string $content;

    public function __construct(
        public string $id,
        public string $title,
        public string $content
    ) {}
}`,
	};

	const output = generatePhp(objectInput, templateInput);

	expect(output).toEqual(expectedOutput);
});
